# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WellMatch
                                 A QGIS plugin
 Wyszukiwanie tożsamych otworów geologicznych w dwóch odrębnych bazach danych.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-09
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Dominik Szrek / PIG-PIB
        email                : dszr@pgi.gov.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *

import sys
import os.path
import subprocess
import pkg_resources

LIBS_PATH = 'http://dszrek.github.io/libs/'

class WellMatch:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'WellMatch_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&WellMatch')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'WellMatch')
        self.toolbar.setObjectName(u'WellMatch')

        self.pluginIsActive = False
        self.dockwidget = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('WellMatch', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/WellMatch/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'WellMatch'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        self.dockwidget = None
        self.pluginIsActive = False
        # Przywrócenie domyślnego tytułu okna QGIS:
        self.title_change(closing=True)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&WellMatch'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def title_change(self, closing=False):
        """Zmiana tytułu okna QGIS."""
        title = iface.mainWindow().windowTitle()
        dashes = ['-', '—']  # W różnych wersjach QGIS występują inne dywizory w tytule
        _dash = ''
        for dash in dashes:
            if dash in title:
                _dash = dash
                break
        new_title = title.replace('| WellMatch', f'{dash} QGIS') if closing else title.replace(f'{dash} QGIS', '| WellMatch')
        iface.mainWindow().setWindowTitle(new_title)

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""
        if not external_libs_exists():
            return

        from .well_match_dockwidget import WellMatchDockWidget
        from .main import dlg_main

        if self.pluginIsActive: # Sprawdzenie, czy plugin jest już uruchomiony
            QMessageBox.information(None, "WellMatch", "Wtyczka jest już uruchomiona")
            return  # Uniemożliwienie uruchomienia drugiej instancji pluginu
        if not self.pluginIsActive:
            self.pluginIsActive = True
            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = WellMatchDockWidget()

            dlg_main(self.dockwidget)  # Przekazanie referencji interfejsu wtyczki do main.py

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

        project_check = self.dockwidget.lyr.project_check()
        if not project_check:
            try:
                self.dockwidget.close()
            except Exception as err:
                print(f"well_match/run: {err}")
            return
        self.title_change()
        # show the dockwidget
        # TODO: fix to allow choice of dock location
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
        self.dockwidget.show()

def external_libs_exists():
    """Sprawdzenie, czy są zainstalowane zewnętrzne biblioteki."""
    missing_libs = detect_missing_libs()
    if missing_libs == -1:
        return False
    if len(missing_libs) > 0:
        lib_names = ", ".join([x[0] for x in missing_libs])
        m_text = f'Brak zainstalowanych zewnętrznych bibliotek:\n{lib_names}.\nSą one niezbędne do działania wtyczki WellMatch. Czy chcesz je teraz zainstalować?'
        reply = QMessageBox.question(None, "WellMatch", m_text, QMessageBox.Yes, QMessageBox.No)
        if reply == QMessageBox.No:
            return False
        else:
            missing_libs_install(missing_libs)
            return False
    else:
        return True

def detect_missing_libs():
    """Próba załadowania zewnętrznych bibliotek i zwrócenie listy niezainstalowanych."""
    missing_libs = []
    ver_minor = sys.version_info.minor
    if ver_minor == 7:
        ext_libs = [
            # Wyłączono paczki związane ze sklearn2
            ['numpy', 'numpy-1.21.6-cp37-cp37m-win_amd64.whl', '1.20.3'],
            ['six', 'six-1.16.0-py2.py3-none-any.whl', '1.5'],
            ['python-dateutil', 'python_dateutil-2.8.2-py2.py3-none-any.whl', '2.8.1'],
            ['pytz', 'pytz-2022.6-py2.py3-none-any.whl', '2020.1'],
            ['pandas', 'pandas-1.0.5-cp37-cp37m-win_amd64.whl', '1.0.5'],
            ['pyparsing', 'pyparsing-3.0.9-py3-none-any.whl', '2.2.1'],
            ['packaging', 'packaging-21.3-py3-none-any.whl', '21.3'],
            # ['patsy', 'patsy-0.5.3-py2.py3-none-any.whl', '0.5.2'],
            # ['scipy', 'scipy-1.7.3-cp37-cp37m-win_amd64.whl', '1.3.2'],
            # ['statsmodels', 'statsmodels-0.13.5-cp37-cp37m-win_amd64.whl', '0.9.0'],
            # ['pydot', 'pydot-1.4.2-py2.py3-none-any.whl', 'all'],
            ['joblib', 'joblib-1.2.0-py3-none-any.whl', '1.0.0'],
            # ['threadpoolctl', 'threadpoolctl-3.1.0-py3-none-any.whl', '2.0.0'],
            # ['scikit-learn', 'scikit_learn-1.0-cp37-cp37m-win_amd64.whl', '0.20.0'],
            # ['category_encoders', 'category_encoders-2.5.1.post0-py2.py3-none-any.whl', 'all'],
            # ['cycler', 'cycler-0.11.0-py3-none-any.whl', '0.10'],
            ['typing_extensions', 'typing_extensions-4.4.0-py3-none-any.whl', '3.6.4'],
            # ['kiwisolver', 'kiwisolver-1.4.4-cp39-cp39-win_amd64.whl', '1.0.1'],
            # ['fonttools', 'fonttools-4.38.0-py3-none-any.whl', '4.22.0'],
            # ['pillow', 'Pillow-9.3.0-cp37-cp37m-win_amd64.whl', '6.2.0'],
            # ['matplotlib', 'matplotlib-3.5.3-cp37-cp37m-win_amd64.whl', '1.5.1'],
            # ['attrs', 'attrs-22.1.0-py2.py3-none-any.whl', '19.2.0'],
            # ['colorama', 'colorama-0.4.6-py2.py3-none-any.whl', 'all'],
            # ['exceptiongroup', 'exceptiongroup-1.0.0rc9-py3-none-any.whl', '1.0.0rc8'],
            # ['iniconfig', 'iniconfig-1.1.1-py2.py3-none-any.whl', 'all'],
            ['zipp', 'zipp-3.10.0-py3-none-any.whl', '0.5'],
            ['importlib_metadata', 'importlib_metadata-5.0.0-py3-none-any.whl', '0.12'],
            # ['pluggy', 'pluggy-1.0.0-py2.py3-none-any.whl', '0.12'],
            # ['tomli', 'tomli-2.0.1-py3-none-any.whl', '1.0.0'],
            # ['pytest', 'pytest-7.2.0-py3-none-any.whl', 'all'],
            # ['sklearn2', 'sklearn2-0.0.13-py2.py3-none-any.whl', 'all'],
            ['setuptools', 'setuptools-65.6.3-py3-none-any.whl', 'all'],
            ['llvmlite', 'llvmlite-0.39.1-cp37-cp37m-win_amd64.whl', '0.39.0dev0'],
            ['numba', 'numba-0.56.4-cp37-cp37m-win_amd64.whl', 'all'],
            ['rapidfuzz', 'rapidfuzz-2.13.2-cp37-cp37m-win_amd64.whl', 'all'],
            ['pyarrow', 'pyarrow-10.0.1-cp37-cp37m-win_amd64.whl', 'all']
            ]
    elif ver_minor == 9:
        ext_libs = [
            # Wyłączono paczki związane ze sklearn2
            ['numpy', 'numpy-1.23.5-cp39-cp39-win_amd64.whl', '1.20.3'],
            ['six', 'six-1.16.0-py2.py3-none-any.whl', '1.5'],
            ['python-dateutil', 'python_dateutil-2.8.2-py2.py3-none-any.whl', '2.8.1'],
            ['pytz', 'pytz-2022.6-py2.py3-none-any.whl', '2020.1'],
            ['pandas', 'pandas-1.5.2-cp39-cp39-win_amd64.whl', '1.5.0'],
            ['pyparsing', 'pyparsing-3.0.9-py3-none-any.whl', '2.2.1'],
            ['packaging', 'packaging-21.3-py3-none-any.whl', '21.3'],
            # ['patsy', 'patsy-0.5.3-py2.py3-none-any.whl', '0.5.2'],
            # ['scipy', 'scipy-1.9.3-cp39-cp39-win_amd64.whl', '1.3.2'],
            # ['statsmodels', 'statsmodels-0.13.5-cp39-cp39-win_amd64.whl', '0.9.0'],
            # ['pydot', 'pydot-1.4.2-py2.py3-none-any.whl', 'all'],
            ['joblib', 'joblib-1.2.0-py3-none-any.whl', '1.0.0'],
            # ['threadpoolctl', 'threadpoolctl-3.1.0-py3-none-any.whl', '2.0.0'],
            # ['scikit-learn', 'scikit_learn-1.1.2-cp39-cp39-win_amd64.whl', '0.20.0'],
            # ['category_encoders', 'category_encoders-2.5.1.post0-py2.py3-none-any.whl', 'all'],
            # ['cycler', 'cycler-0.11.0-py3-none-any.whl', '0.10'],
            # ['kiwisolver', 'kiwisolver-1.4.4-cp39-cp39-win_amd64.whl', '1.0.1'],
            # ['fonttools', 'fonttools-4.38.0-py3-none-any.whl', '4.22.0'],
            # ['pillow', 'Pillow-9.3.0-cp39-cp39-win_amd64.whl', '6.2.0'],
            # ['matplotlib', 'matplotlib-3.5.1-cp39-cp39-win_amd64.whl', '1.5.1'],
            # ['attrs', 'attrs-22.1.0-py2.py3-none-any.whl', '19.2.0'],
            # ['colorama', 'colorama-0.4.6-py2.py3-none-any.whl', 'all'],
            # ['exceptiongroup', 'exceptiongroup-1.0.0rc9-py3-none-any.whl', '1.0.0rc8'],
            # ['iniconfig', 'iniconfig-1.1.1-py2.py3-none-any.whl', 'all'],
            # ['pluggy', 'pluggy-1.0.0-py2.py3-none-any.whl', '0.12'],
            # ['tomli', 'tomli-2.0.1-py3-none-any.whl', '1.0.0'],
            # ['pytest', 'pytest-7.2.0-py3-none-any.whl', 'all'],
            # ['sklearn2', 'sklearn2-0.0.13-py2.py3-none-any.whl', 'all'],
            ['setuptools', 'setuptools-65.6.3-py3-none-any.whl', 'all'],
            ['llvmlite', 'llvmlite-0.39.1-cp39-cp39-win_amd64.whl', '0.39.0dev0'],
            ['numba', 'numba-0.56.4-cp39-cp39-win_amd64.whl', 'all'],
            ['rapidfuzz', 'rapidfuzz-2.13.2-cp39-cp39-win_amd64.whl', 'all'],
            ['cramjam', 'cramjam-2.6.2-cp39-none-win_amd64.whl', '2.3'],
            ['fsspec', 'fsspec-2022.11.0-py3-none-any.whl', 'all'],
            ['fastparquet', 'fastparquet-2022.11.0-cp39-cp39-win_amd64.whl', 'all']
            ]
    else:
        QMessageBox.critical(None, "WellMatch", f"Wtyczka WellMatch nie może być uruchomiona w tej wersji QGIS. Możesz zgłosić się o pomoc do autora - dszr@pgi.gov.pl")
        return -1
    for lib in ext_libs:
        required_ver = lib[2]  # lib_ver_from_name(lib[1])
        if not required_ver:
            print(f"Błąd przy ustaleniu wymaganej wersji biblioteki: {lib[1]}")
            missing_libs.append(lib)
            continue
        try:
            current_ver = pkg_resources.get_distribution(lib[0]).version
        except:
            print(f"Brak zainstalowanej biblioteki: {lib[0]}")
            missing_libs.append(lib)
            continue
        if required_ver != 'all':
            if pkg_resources.parse_version(current_ver) < pkg_resources.parse_version(required_ver):
                print(f"{lib[0]}, current:{pkg_resources.parse_version(current_ver)}, required:{pkg_resources.parse_version(required_ver)}")
                missing_libs.append(lib)
    return missing_libs

def lib_ver_from_name(lib_name):
    """Zwraca wersję paczki na podstawie jej nazwy."""
    sep_1 = lib_name.find('-')
    if sep_1 == -1:
        return False
    sep_2 = lib_name[sep_1 + 1:].find('-')
    if sep_2 == -1:
        return False
    return lib_name[sep_1 + 1 : sep_1 + sep_2 + 1]

def missing_libs_install(libs):
    """Instaluje brakujące biblioteki zewnętrzne."""
    for lib in libs:
        lib_path = f'{LIBS_PATH}{lib[1]}'
        lib_path = lib_path.replace("\\\\", "\\")
        print(lib_path)
        installed = lib_install_with_proxy(lib_path)
        if installed:
            continue
        # Próba instalacji paczki bez proxy:
        try:
            subprocess.check_call(['python', '-m', 'pip', 'install', lib_path, '--force-reinstall', '--no-dependencies'])
        except Exception as err:
            QMessageBox.critical(None, "WellMatch", f"Brak możliwości instalacji biblioteki ({err}). Możesz zgłosić się o pomoc do autora - dszr@pgi.gov.pl")
            return
    QMessageBox.information(None, "WellMatch", f"Wszystkie wymagane biblioteki zostały zainstalowane. Należy uruchomić ponownie program QGIS.")

def lib_install_with_proxy(lib_path):
    """Instalacja paczki z użyciem proxy."""
    try:
        subprocess.check_call(['python', '-m', 'pip', 'install', lib_path, '--force-reinstall', '--no-dependencies', '--proxy=proxy.pgi.local'])
    except:
        return False
    return True
